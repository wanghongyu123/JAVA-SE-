 1. 用构造器确保初始化
        可以假想为编写的每个类都定义一个initialize()方法。该方法的名称提醒你在使用其对象之前，应首先调用initialize()。然而，这同时意味着用户必须记得
    自己去掉用此方法。在Java中，通过提供构造器，类的设计者可确保每个对象都会得到初始化。创建对象时，如果其类具有构造器，Java就会在用户有能力操作对象之前
    自动调用相应的构造器，从而保证了初始化的进行。
        构造器的名称必须与类名完全相同，所以 “每个方法首字母小写” 的编码风格并不适用于构造器。构造器有助于减少错误，并使代码更易于阅读。从概念上讲，“初
    始化” 与 “创建” 是彼此独立的，然而在上面的代码中，你却找不到对initialize()方法的明确调用。在Java中， “初始化” “创建” 绑定在一起，两者不能分离。
        注意：构造器名与类名相同，无任何返回值。
        类属性域定义时初始化和通过构造器初始化差异：定义时初始化域是固定的，构造器初始化域是可以改变的。
        
 2. 方法重载
        
        
    

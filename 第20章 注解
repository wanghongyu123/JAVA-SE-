    注解（也被称为元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便地使用这些数据。
    它们可以提供用来完整地描述程序所需的信息，而这些信息是无法用Java来表达的。因此，注解使得我们能够以将由编译器来测试和验证的格式，存储有关程序的额外信息
注解可以用来生成描述符文件，甚至或是新的类定义，并且有助于减轻编写 “样板” 代码的负担。通过使用注解，我们可以将这些元数据保存在Java源代码中，并利用
annotation API为自己的注解构造处理工具，同时，注解的优点还包括更加干净易读的代码以及编译期类型检查等。
    注解是真正的语言级的概念，一旦构造出来，就享有编译期的类型检查保护。注解是在实际的源代码级别保存所有的信息，而不是某种注释性的文字。

20.1 基本语法

20.1 1 定义注解
    可以看到，注解的定义看起来很像接口的定义。事实上，与其他任何Java接口一样，注解也将会编译成class文件。
    
    package net.mindview.atunit;
    import java.lang.annotation.*;

    @target(ElementType.METHOD)
    @Retention(RetentionPolicy.RUNTIME)
    public @integrface Test {}
    
    在注解中，一般都会包含一些元素以表示某些值。当分析处理注解时，程序或工具可以利用这些值。注解的元素看起来就像接口的方法，唯一的区别是你可以为其指定默
认值。没有元素的注解称为标记注解（marker annotation）。
    下面是一个简单的注解，我们可以用它来跟踪一个项目中的用例。如果一个方法或一组方法实现了某个用例的需求，那么程序员可以为此方法加上该注释。于是，项目经
理通过计算已实现的用例，就可以很好地掌控项目的进展。而如果要更新或修改系统的业务逻辑，则维护该项目的开发人员也可以很容易地在代码中找到对应的用例。
    import java.lang.annotation.*;

    @Target(ElementType.METHOD)
    @Retention(RetentionPolicy.RUNTIME)
    public @interface UseCase {
	      public int id();
	      public String description() default "no description";
    }
    在下面的类中，有三个方法被注释为用例。
    import java.util.*;

    public class PasswordUtils
    {
        @UseCase(id = 47, description = "Passwords must contain at least one numeric")
        public boolean validatePassword(String password) {
            return password.matches("\\w*\\d\\w*");
        }
        @UseCase(id = 48)
        public String encryptPassword(String password) {
            return new StringBuilder(password).reverse().toString();
        }
        @UseCase(id = 49, description = "New passwords can't equal previously used ones")
        public boolean checkForNewPassword(List<String> prevPasswords, String password){
            return !prevPasswords.contains(password);
        }
    }
    注解的元素在使用时表现为名-值对的形式。
20.1.2 元注解
    Java目前只内置了三种标准注解（前面介绍过），以及四种元注解。元注解专职负责注解其他的注释：
    -----------------------------------------------------------------------------
    @Target    表示该注解可以用于什么地方。可能的ElementType参数包括：
               CONSTRUCTOR：构造器的声明
               FIELD：域声明（包括enum实例）
               LOCAL_VARIABLE：局部变量声明
               METHOD：方法声明
               PACKAGE：包声明
               PARAMETER：参数声明
               TYPE：类、接口（包括注释类型）或enum声明
    -----------------------------------------------------------------------------
    @Retention 表示需要在什么级别保存该注解信息。可选的RetentionPolicy参数包括：
               SOURCE：注释将被编译器丢弃。
               CLASS：注解在class文件中可用，但会被VM丢弃
               RUNTIME：VM将在运行期也保存注解，因此可以通过反射机制读取注解的信息。
    -----------------------------------------------------------------------------
    @Documented 将此注解包含在Javadoc中
    -----------------------------------------------------------------------------
    @Inherited  允许子类继承父类中的注解。
    -----------------------------------------------------------------------------
    大多数时候，程序员主要是定义自己的注解，并编写自己的处理器来处理它们。
    
20.2 编写注解处理器
    如果没有用来读取注解的工具，那注解也不会比注释更有用。使用注解的过程中，很重要的一个部分就是创建与使用注解处理器。Java SE5扩展了反射机制的API，
以帮助程序员构造这类工具。同时，它还提供了一个外部工具帮助程序员解析带有注解的Java源代码。
    import java.lang.reflect.*;
    import java.util.*;

    public class UseCaseTracker
    {
      public static void trackUseCases(List<Integer> useCases, Class<?> cl) {
        for (Method m : cl.getDeclaredMethods())
        {
          UseCase uc = m.getAnnotation(UseCase.class);
          if (uc != null)
          {
            System.out.println("Found Use Case:" + uc.id() + " " + uc.description());
            useCases.remove(new Integer(uc.id()));
          }
        }
        for (int i : useCases)
        {
          System.out.println("Warning: Missing use case-" + i);
        }
      }

      public static void main(String[] args) {
        List<Integer> useCases = new ArrayList<Integer>();
        Collections.addAll(useCases, 47, 48, 49, 50);
        trackUseCases(useCases, PasswordUtils.class);
      }
    }
    这个程序用到了两个反射的方法：getDeclaredMethods()和getAnnotation()，它们都属于AnnotatedElement接口（CLASS、Method与Field等类都实现了
该接口）。
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

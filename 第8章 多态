    多态通过分离做什么和怎么做，从另一角度将接口和实现分离开来。多态不但能够改善代码的组织和可读性，还能够创建可扩展的程序————即无论在项目最初创建时还是
在需要添加新功能时都可 “生长” 的程序。
    “封装” 通过合并特征和行为来创建新的数据类型。 “实现隐藏” 则通过将细节 “私有化” 把接口和实现分离开来。“多态” 的作用则是消除类型之间的耦合关系。多态
方法调用允许一种类型表现出与其他相似类型之间的区别，只要它们都是从同一个基类导出而来的。这种区别是根据方法行为的不同而表现出来的，虽然这些方法都可以通多同
一个基类来调用。
    所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向
哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代
码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择
多个运行状态，这就是多态性。

1 再论向上转型
    对象既可以作为它自己本身的类型使用，也可以作为它的基类型使用。而这种把某个对象的引用视为基类型的引用的做法被称为向上转型。向上转型可能会 “缩小” 接口。

2 方法调用绑定
    将一个方法调用一个方法主体关联起来称作绑定。若在程序执行前进行绑定（如果有的话，由编译器和连接程序实现），叫做前期绑定。后期绑定，它的含义就是在运行
 时根据对象的类型进行绑定。后期绑定也叫做动态绑定或运行时绑定。如果一种语言想实现后期绑定，就必须具有某种机制，以便在运行时能判断对象的类型，从而调用恰当
 的方法。也就是说，编译器一直不知道对象的类型，但是方法调用机制能够找到正确的方法体，并加以调用。后期绑定机制随编程语言的不同而有所不同，不管怎样都必须在
 对象中安置某种 “类型信息”。
    Java中除了static方法和final方法（private方法属于final方法）之外，其他所有的方法都是后期绑定。这意味着同常情况下，我们不必判定是否应该进行后期绑
 定————它会自动发生。
    为什么要将方法声明为final呢？1）防止覆写。2）有效的 “关闭” 动态绑定。这样，编译器就可以为final方法调用生成更有效地代码。然而，大多数情况下，这样
 做对程序的整体性能不会有什么改观。所以，最好根据设计来决定是否使用final，而不是出于试图提高性能的目的来使用final。
 2.1 可扩展性
     由于有多态机制，我们可根据自己的需求对系统添加任意多的新类型，只需要与基类接口通信。这样的程序是可扩展的，因为可以从通用的基类继承出新的数据类型 
 ，从而添加一些功能。那些操纵基类接口的方法不需要任何改动就可以应用于新类。
 2.2 缺陷：“覆盖” 私有方法
     结论：只有非private方法才可以被覆盖；但是还需要密切注意覆盖private方法的现象，这时编译器不会报错，但是也不会按照我们所期望的来执行。确切的说，
 在导出类中，对于基类中的private方法，最好采用不同的名字。
 2.3 缺陷：域与静态方法
     一旦你了解了多态机制，可能就会开始认为所有事物都可以多态地发生。然而，只有普通的方法调用可以是多态的。当Sub对象转型为Super引用时，任何域访问操作
 都将由编译器解析，因此不是多态的。如果某个方法是静态的，它的行为就不具有多态性。静态方法是与类，而并非与单个的对象相关联。
 
 3 构造器与多态
     通常，构造器不同于其他种类的方法。涉及到多态时仍是如此。尽管构造器并不具有多态性（它们实际上时static方法，只不过该static声明是隐式的）。
 3.1 继承与清理
     通过组合和继承方法来创建新类时，永远不必担心对象的清理问题，子对象通常都会留给垃圾回收器进行处理。如果确实遇到清理的问题，那么必须用心为新类创建
 dispose()方法。并且由于继承的缘故，如果我们有其他作为垃圾回收一部分的特殊清理动作，就必须在导出类中覆盖dispose()方法。当覆盖被继承类的dispose()
 方法时，务必记住调用基类版本的dispose()方法；否则，基类的的清理动作就不会发生。
     销毁顺序：销毁的顺序因该和初始化顺序相反。对于字段，则意味着与声明的顺序相反（因为字段的初始化是按照声明的顺序执行的）。对于基类，应该首先对导出
 类进行清理，然后才是基类。这是因为导出类的清理可能会调用基类中的某些方法，所以需要使基类中的构件仍起作用而不应过早的销毁它们。
     然而，如果这些成员对象中存在于其他一个或多个对象共享的情况，问题就变得复杂了，你就不能简单地假设你可以调用dispose()了。在这种情况下，也许就必须
 使用引用计数来跟踪仍旧访问着共享对象的对象数量了。
 3.2 构造器内部的多态方法的行为
     如果要调用构造器内部的一个动态绑定方法，就要用到那个方法的被覆盖后的定义。然而，这个调用的效果可能相当难以预料，因为被覆盖的方法在对象被完全构造
 之前就会调用。这可能会造成一些难于发现的隐藏错误。
 
 4 协变返回类型
     它表示在导出类中的被覆盖方法可以返回基类方法的返回类型的某种导出类型。
 
 5 用继承进行设计
     更好的方式是首先选择 “组合”，尤其是不能十分确定应该使用哪一种方式时，组合不会强制我们的程序设计进入继承的层次结构中。而且，组合更加灵活，因为它
 可以动态选择类型（因此也就选择了行为）；相反，继承在编译时就需要知道确切类型。
     一条通用的准则是：“用继承来表达行为间的差异，并用字段表达状态上的变化”。
 5.1 纯继承与扩展
     基类接口与导出类接口完全相同称为 “is-a” 关系。如果导出类添加扩展接口，关系为 “is-like-a”。因此一旦向上转型，就不能调用那些新方法。
 5.2 向下转型与运行时类型识别
     在Java语言中，所有转型都会得到检查！所以即使我们只是进行一次普通的加括弧形式的类型转换，在进入运行期时仍然会对其金总检查，以便保证它的确是我们希
 望的那种类型。如果不是，就会返回一个ClassCastException（类型转换异常）。
     
 

 
 
 
 
 
 
 

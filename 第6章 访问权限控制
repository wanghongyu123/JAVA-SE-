      Java提供了访问权限修饰词，以供类库开发人员向客户端程序员指明哪些是可用的，哪些是不可用的。访问权限控制的等级，从最大权限到最小权限依次为：public、
protected、包访问权限（没有关键词）和private。

1. 包：库单元
    包内包含有一组类，它们在单一的名字空间下被组织在了一起。例如：在Java的标准发布中有一个工具库，它被组织在java.util名字空间之下。java.util中有一个
    叫做ArrayList的类，使用ArrayList的一种方式是用其全名java.util.ArrayList来指定。java.util.ArrayList list = new java.util.ArrayList();
    当编写一个Java源代码文件时，此文件通常称为编译单元，每一个编译单元都必须有一个后缀名.java，而在编译单元内则可以有一个public类，该类的名称必须与文
    件的名称相同（包括大小写，但不包括文件的后缀名.java）。每个编译单元只能有一个public类，否则编译器就不会接受。如果在该编译单元之中还有额外的类的话，
    那么在包之外的世界是无法看见这些类的，这是因为它们不是public类，而且它们主要用来为主public类提供支持。
1.1 代码组织
    当编译一个.java文件时，在.java文件中的每个类都会有一个输出文件，而该输出文件的名称与.java文件中每个类的名称相同，只是多了一个后缀名.class。因此，
    在编译少量.java文件之后，会得到大量的.class文件。如果用编译型语言编写过程序，那么对于编译器产生一个中间文件（通常是一个obj文件），然后再与通过链接
    器（用以创建一个可执行文件）或类库产生器（librarian，用以创建一个类库）产生的其他同类文件捆绑在一起的情况，可能早已司空见惯。但这并不是Java的工作
    方式。Java可运行程序是一组可以打包并压缩为一个Java文档文件（JAR，使用Java的jar文档生成器）的.class文件。Java解释器负责这些文件的查找、装载和解释
    。
    类库实际上是一组类文件。其中每个文件都有一个public类，以及任意数量的非public类。因此每个文件都有一个构件。如果希望这些构件（每一个都有它们自己的独
    立的.java和.class文件）从属于一个群组，就可以使用关键字package。
    如果使用package语句，它必须是文件中除注释以外的第一句程序代码。在文件起始处写：package access;
1.2 创建独一无二的包名
    按照惯例，package名称的第一部分是类的创建者的反顺序的Internet域名。 Java解释器的运行过程如下：首先找出CLASSPATH（可以通过操作系统来设置，有时也
    可以通过安装程序-用来在你的机器上安装Java或基于Java的工具-来设置）。CLASSPATH包含一个或多个目录，用作查找.class文件的根目录。从根目录开始，解释
    器获取包的名称并将每个句点替换成反斜杠，以从CLASSPATH根中产生一个路径名称（于是，package foo.bar.baz jiu）

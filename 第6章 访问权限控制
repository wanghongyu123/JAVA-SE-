      Java提供了访问权限修饰词，以供类库开发人员向客户端程序员指明哪些是可用的，哪些是不可用的。访问权限控制的等级，从最大权限到最小权限依次为：public、
protected、包访问权限（没有关键词）和private。

1. 包：库单元
    包内包含有一组类，它们在单一的名字空间下被组织在了一起。例如：在Java的标准发布中有一个工具库，它被组织在java.util名字空间之下。java.util中有一个
    叫做ArrayList的类，使用ArrayList的一种方式是用其全名java.util.ArrayList来指定。java.util.ArrayList list = new java.util.ArrayList();
    当编写一个Java源代码文件时，此文件通常称为编译单元，每一个编译单元都必须有一个后缀名.java，而在编译单元内则可以有一个public类，该类的名称必须与文
    件的名称相同（包括大小写，但不包括文件的后缀名.java）。每个编译单元只能有一个public类，否则编译器就不会接受。如果在该编译单元之中还有额外的类的话，
    那么在包之外的世界是无法看见这些类的，这是因为它们不是public类，而且它们主要用来为主public类提供支持。
1.1 代码组织
    当编译一个.java文件时，在.java文件中的每个类都会有一个输出文件，而该输出文件的名称与.java文件中每个类的名称相同，只是多了一个后缀名.class。因此，
    在编译少量.java文件之后，会得到大量的.class文件。如果用编译型语言编写过程序，那么对于编译器产生一个中间文件（通常是一个obj文件），然后再与通过链接
    器（用以创建一个可执行文件）或类库产生器（librarian，用以创建一个类库）产生的其他同类文件捆绑在一起的情况，可能早已司空见惯。但这并不是Java的工作
    方式。Java可运行程序是一组可以打包并压缩为一个Java文档文件（JAR，使用Java的jar文档生成器）的.class文件。Java解释器负责这些文件的查找、装载和解释
    。
    类库实际上是一组类文件。其中每个文件都有一个public类，以及任意数量的非public类。因此每个文件都有一个构件。如果希望这些构件（每一个都有它们自己的独
    立的.java和.class文件）从属于一个群组，就可以使用关键字package。
    如果使用package语句，它必须是文件中除注释以外的第一句程序代码。在文件起始处写：package access;
1.2 创建独一无二的包名
    按照惯例，package名称的第一部分是类的创建者的反顺序的Internet域名。 Java解释器的运行过程如下：首先找出CLASSPATH（可以通过操作系统来设置，有时也
    可以通过安装程序-用来在你的机器上安装Java或基于Java的工具-来设置）。CLASSPATH包含一个或多个目录，用作查找.class文件的根目录。从根目录开始，解释
    器获取包的名称并将每个句点替换成反斜杠，以从CLASSPATH根中产生一个路径名称（于是，package foo.bar.baz 就变成为foo/bar/baz或foo\bar\baz其他，
    这一切取决于操作系统）。得到的路径会与CLASSPATH中的各个不同的项相连接，解释器就在这些目录中查找与创建的类名称相关的.class文件。（解释器还会去查找
    某些涉及Java解释器所在位置的标准目录。）
1.3 定制工具库
    可以创建自己的工具库来减少或消除重复的程序代码。
1.4 用import改变行为
    Java没有C的条件编译功能，该功能可能使你不必更改任何程序代码，就能够切换开关并产生不同的行为。Java去掉此功能的原因可能是因为C在绝大多数情况下是用此
    功能来解决跨平台问题的，即程序代码的不同部分是根据不同的平台来编译的。由于Java滋生可以自动跨越不同的平台，因此这个功能对Java而言是没有必要的。
1.5 对使用包的忠告
    务必记住，无论何时创建包，都已经在给定包的名称的时候隐含地指定了目录结构。这个包必须位于其名称所指定的目录之中，而该目录必须是在以CLASSPATH开始的目
    录中可以查询到的。
    
2 Java访问权限修饰词
    
2.1 包访问权限
    默认访问权限没有任何关键字，但通常是指包访问权限。这就意味着当前的包中的所有其他类对那个成员都有访问权限，但对于这个包之外的所有类，这个成员确是
    private。由于一个编译单元（即一个文件），只能隶属于一个包，所以经由包访问权限，处于同一个编译单元中的所有类彼此之间都是自动可访问的。
    取得对某成员的访问权的唯一途径是：
    1）使该成员成为public。于是，无论是谁，无论在哪里，都可以访问该成员。
    2）通过不加访问权限修饰词并将其他类放置于同i个包内的方式给成员赋予包访问权。于是包内的其他类也就可以访问该成员了。
    3）继承而来的类即可以访问public成员也可以访问protected成员。只有在两个类都处于同一个包内时，它才可以访问包访问权限的成员。但现在不必担心继承和
    protected
    4）提供访问器和变异器方法（也称作get/set方法），以读取和改变数值。
2.2 public：接口访问权限
    使用关键字public，就意味着public之后紧跟着的成员声明自己对每个人都是可用的，尤其是使用类库的客户程序员更是如此。不要错误地认为Java总是将当前目录
    视作是查找行为的起点之一。如果你的CLASSPATH之中缺少一个“.”作为路径之一的话，Java就不会查找那里。
    默认包：
    //：access/Cake.java
    // Access a class in a separate compilation nuit.

    class Cake {
            public static void main(String[] args) {
                  Pie x = new Pie();
                  x.f();
            }
     }/* Output:
     Pie.f()
     *///:~
     
     //: access/Pie.java
     // The other class
     class Pie {
            void f() { Sysytem.out.println("Pie.f()");}
     }///:~
     
     最初或许会认为两个文件毫不相关，但Cake却可以创建一个Pie对象并调用它的f()方法！（记住，为了使文件可以被编译，在你的CLASSPATH之中一定要有 “.”。
     ）通常会认为Pie和f（）享有包访问权限，因而是不可以为Cake所用的。它们的确享有包访问权限，但这只是部分正确的。Cake.java可以访问它们地原因是因为
     它们同处于相同的目录并且没有给自己设定任何包名称。Java将这样的文件自动看作是隶属于该目录的默认包中，于是它们为该目录中所有其他的文件都提供了包访
     问权限。
2.3 private：你无法访问
     关键字private的意思是，除了包含该成员的类之外，其他任何类都无法访问这个成员。
     private的示例
     //：access/IceCream.java
     // Demonstrates "private" keyword
     
     class Sundae {
            private Sundae() {}
            static Sundae makeASundae() {
                  return new Sundae;
            }
     }
     
     public class IceCream {
            public static void main(String[] args) {
                  //! Sundae x = new Sundae();
                  Sundae x = Sundae.makeASundae();
            }
     }///:~
     
     这是一个说明private终有其用武之地的示例：可能想控制如何创建对象，并阻止别人直接访问某个特定的构造器（或全部构造器）。在上面的例子中，不能通过构造
     器来创建Sundae对象，而必须调用makeASUndae()方法来达到此目的。
     1）任何可以肯定只是该类的一个“助手”方法的方法，都可以把它指定为private，以确保不会在包内的其他地方误用到它，于是也就防止了你回去改变或删除这个
     方法。将方法指定为private确保了你拥有这种选择权。
     2）这对于类中的private域同样适用。除非必须公开底层实现细目（此种情况很少见），否则应该将所有的域指定为private 。然而，不能因为在类中某个对象的
     引用是private，就认为其他的对象无法拥有该对象的public引用。
2.4 protected：继承访问权限
     
     
    
     
    
    
    
    
    
    
    
    

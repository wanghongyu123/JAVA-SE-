    接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法。
    首先，我们将学习抽象类，它是普通的类与接口之间的一种中庸之道。尽管在构建具有某些未实现方法的类时，你的第一方法可能是创建接口，但是抽象类仍旧时用于此
目的的一种重要而必须的工具。因为你不可能总是使用纯接口。

1 抽象类和抽象方法
    Java提供一个叫做抽象方法的机制，这种方法是不完整的；仅有声明而没有方法体。下面是抽象方法声明所采用的语法：abstract void f(); 包含抽象方法的类叫做
抽象类。如果一个类包含一个或多个抽象方法，该类必须被限定为抽象的。（否则，编译器就会报错。）
    注意：1）抽象类不能实例化。2）如果从一个抽象类继承，并想创建该新类的对象，就必须实现基类中所有的抽象方法。如果不这样做，那么导出类也是抽象类。3）导
出类的构造器可以调用基类（抽象基类）的构造器。

2 接口
    interface关键字使抽象的概念更向前迈进了一步。interface关键字产生一个完全抽象的类，它根本就没有提供任何具体实现。它允许创建者确定方法名，参数列表和
返回类型，但是没有任何方法体。接口只提供了形式，而未提供任何具体实现。
    一个接口表示：“所有实现了该特定接口的类看起来都像这样”。因此，任何使用特定接口的代码都知道可以调用该接口的哪些方法。但是，interface不仅仅是一个极度
抽象的类，因为它允许人们通过创建一个能够被向上转型为多种基类的类型，来实现某种类似多重继承变种的特性。
    接口也可以包含域，但是这些域隐式地是static和final的。可以选择在接口中显示的将方法声明为public的，但即使你不这么做，他们也是public的。
    
3 完全解耦
    只要一个方法操作的是类而非接口，那么你就只能使用这个类及其子类。如果你想要将这个方法应用于不在此继承结构中的某个类，那么你就会触霉头了。接口可以在很
大程度上放宽这种限制，因此，它使得我们可以编写可复用性更好的代码。
    创建一个能够根据所传递的参数对象的不同而具有不同行为的方法，被称为策略设计模式。这类方法包含所要执行的算法中固定不变的部分，而 “策略” 包含变化的部
分。策略就是传递进去的参数对象，它包含要执行的代码。
    但是，你经常碰到的情况是你无法修改你想要使用的类。在这种情况下可以使用适配器设计模式。适配器中的代码将接受你所拥有的接口，并产生你所需要的接口。
    
    class FilterAdapter implements Processor {
        Filter filter;
        public FilterAdapter(Filter filter) {
            this.filter = filter;
        }
    }
    
4 Java中的多重继承
    在导出类中，不强制要求必须有一个是抽象的或 “具体的” 基类。如果要从一个非接口的类继承，那么只能从一个类去继承。其余的基元素都必须是接口。需要将所有
的接口名都置于implements关键字之后，用逗号将它们隔开。可以继承任意多个接口，并且可以向上转型为每个接口，因为每个接口都是一个独立类型。
    我们应该使用接口还是抽象类？如果要创建不带任何方法定义和成员变量的基类，那么就应该选择接口而不是抽象类。事实上，如果知道某事物应该成为一个基类，那
么第一选择应该是使它成为一个接口。

5 通过继承来扩展接口
    通过继承，可以很容易地在接口中添加新的方法声明，还可以通过继承在新接口中组合数个接口。例如：
    
    interface Monster {
        void menace();
    }
    
    interface DangerousMonster extends Monster {
        void destroy();
    }
    
    interface Lethal {
        void kill();
    }
    
    interface Vampare extends DangerousMonster, Lethal{
        void drinkBload();
    }
    
    一般情况下，只可以将extends用于单一类，但是可以引用多个基类接口。
    
5.1 组合接口时的名字冲突
    例子：覆盖，实现，重载搅在一起
    interface I1 { void f(); }
    interface I2 { int f(int i); }
    interface I3 { int f(); }
    class C {public int f() {return 1; } }
    
    class C2 implements I1, I2 {
        public void f() {} // 正确，实现了接口I1中的方法
        public int f(int i) {return 1;} //正确，实现了接口I2中的方法，并与隐藏的C类中的方法重载
    }
    
    class C3 extends C implements I2 {
        public int f(int i) {return 1;}//正确，实现了接口I2中的方法，并与隐藏的C类中方法的重载
    }
     
    class C4 extends C implements I3 {
        public int f() {return 1;} // 正确，实现了接口I3中的方法，并完成了C类中方法的覆盖
    }
    
    //！class C5 extends C implements I1 {}//错误，接口I1方法没有实现
    //! interface I4 extends I1, I3 {} //错误，接口I1和I3的方法不属于重载，会发生混乱
    
6 适配接口
    接口最吸引人的原因之一就是允许同一个接口具有多个不同的具体实现。在简单的情况中，它的体现形式通常是一个接口类型的方法，而该接口的实现和向该方法传
递的对象取决于方法的使用者。接口的常见用法：策略设计模式
    在适配器设计模式中，我们可以在任何现有类之上添加新的接口，所以这意味着让方法接受接口类型，是一种让任何类都可以对该方法进行适配的方式。这就是使用
接口而不是类的强大之处。

7 接口中的域
    因为你放入接口中的任何域都自动是static和final的，所以接口就成为了一种很便捷的用来创建常量值组的工具。在Java SE5之前采用这种方法产生和（枚举
类型）一样的效果，在Java SE5时，使用枚举类型。
7.1 初始化接口中的域
    在接口中定义的域不能是 “空final”，但是可以是非常量表达式初始化，当然这些域不是接口的一部分，它们的值被存储在该接口的静态存储区域内。
    
8 嵌套接口
    
9 接口与工厂
    接口是实现多重继承的途径，而生成遵循某个接口的对象的典型方式就是工厂方法设计模式。这与直接调用构造器不同，我们在工厂对象上调用的是创建方法，而该
工厂对象将生成接口的某个实现类。理论上，通过这种方式，我们的代码将完全与接口实现分离，这就使得我们可以透明的将某个实现替换为另一个实现。
    工厂方法结构：
    interface Service {
        void method1();
        void method2();
    }
    interface ServiceFactory {
        Service getService();
    }
    class Impl1 implements Service{
        Impl1() {}
        public void method1() {}
        public void method2() {}
    }
    class ImplFactory implements ServiceFactory {
        public Service getService() {
            reutrn new Impl1();
        }
    }
    public class Factories {
        public static void serviceConsumer(ServiceFactory fact) {
            service s = fact.getService();
            s.method1();
            s.method2();
        }
        public static void main(String[] args) {
            serviceConsumer(new Impl1());
        }
    }
    如果不是工厂方法，你的代码就必须在某处制定将要创建的Serivice的确切类型，以便调用合适的构造器。为什么我们想要添加这种额外级别的间接性呢？一个常见
的原因是想要创建框架。

10 总结
    恰当的原则应该是优先选择类而不是接口。从类开始，如果接口的必须性变得非常明确，那么就进行重构。接口是一种重要的工具，但是它们容易被滥用。
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

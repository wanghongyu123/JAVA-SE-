    接口和内部类为我们提供了一种将接口与实现分离的更加结构化的方法。
    首先，我们将学习抽象类，它是普通的类与接口之间的一种中庸之道。尽管在构建具有某些未实现方法的类时，你的第一方法可能是创建接口，但是抽象类仍旧时用于此
目的的一种重要而必须的工具。因为你不可能总是使用纯接口。

1 抽象类和抽象方法
    Java提供一个叫做抽象方法的机制，这种方法是不完整的；仅有声明而没有方法体。下面是抽象方法声明所采用的语法：abstract void f(); 包含抽象方法的类叫做
抽象类。如果一个类包含一个或多个抽象方法，该类必须被限定为抽象的。（否则，编译器就会报错。）
    注意：1）抽象类不能实例化。2）如果从一个抽象类继承，并想创建该新类的对象，就必须实现基类中所有的抽象方法。如果不这样做，那么导出类也是抽象类。3）导
出类的构造器可以调用基类（抽象基类）的构造器。

2 接口
    interface关键字使抽象的概念更向前迈进了一步。interface关键字产生一个完全抽象的类，它根本就没有提供任何具体实现。它允许创建者确定方法名，参数列表和
返回类型，但是没有任何方法体。接口只提供了形式，而未提供任何具体实现。
    一个接口表示：“所有实现了该特定接口的类看起来都像这样”。因此，任何使用特定接口的代码都知道可以调用该接口的哪些方法。但是，interface不仅仅是一个极度
抽象的类，因为它允许人们通过创建一个能够被向上转型为多种基类的类型，来实现某种类似多重继承变种的特性。
    接口也可以包含域，但是这些域隐式地是static和final的。可以选择在接口中显示的将方法声明为public的，但即使你不这么做，他们也是public的。
    
3 完全解耦
    只要一个方法操作的是类而非接口，那么你就只能使用这个类及其子类。如果你想要将这个方法应用于不在此继承结构中的某个类，那么你就会触霉头了。接口可以在很
大程度上放宽这种限制，因此，它使得我们可以编写可复用性更好的代码。
    创建一个能够根据所传递的参数对象的不同而具有不同行为的方法，被称为策略设计模式。这类方法包含所要执行的算法中固定不变的部分，而 “策略” 包含变化的部
分。策略就是传递进去的参数对象，它包含要执行的代码。
    但是，你经常碰到的情况是你无法修改你想要使用的类。在这种情况下可以使用适配器设计模式。适配器中的代码将接受你所拥有的接口，并产生你所需要的接口。
    
    class FilterAdapter implements Processor {
        Filter filter;
        public FilterAdapter(Filter filter) {
            this.filter = filter;
        }
    }
    
4 Java中的多重继承
        
    
    
    
    
    
    
    
    
    
    
